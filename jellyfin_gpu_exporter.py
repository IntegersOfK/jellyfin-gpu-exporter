from prometheus_client import start_http_server, REGISTRY
from prometheus_client.core import GaugeMetricFamily, CounterMetricFamily
import subprocess
import time
import os

CONTAINER_NAME = os.getenv("TARGET_CONTAINER", "jellyfin")
PORT = int(os.getenv("EXPORTER_PORT", "9109"))

class JellyfinGPUCollector:
    def __init__(self):
        self.error_total = 0

    def collect(self):
        labels = [CONTAINER_NAME]
        metrics = {
            "jellyfin_gpu_ok": 0,
            "jellyfin_gpu_memory_used_mebibytes": 0,
            "jellyfin_gpu_memory_total_mebibytes": 0,
            "jellyfin_gpu_utilization_percent": 0,
            "jellyfin_gpu_temperature_celsius": 0,
            "jellyfin_gpu_power_draw_watts": 0.0,
            "jellyfin_gpu_process_count": 0
        }

        try:
            # Query main GPU metrics
            cmd = [
                "docker", "exec", CONTAINER_NAME, "nvidia-smi",
                "--query-gpu=memory.used,memory.total,utilization.gpu,temperature.gpu,power.draw",
                "--format=csv,noheader,nounits"
            ]
            out = subprocess.check_output(cmd, text=True, timeout=5).strip()
            parts = out.split(",")
            if len(parts) == 5:
                metrics["jellyfin_gpu_ok"] = 1
                metrics["jellyfin_gpu_memory_used_mebibytes"] = int(parts[0].strip())
                metrics["jellyfin_gpu_memory_total_mebibytes"] = int(parts[1].strip())
                metrics["jellyfin_gpu_utilization_percent"] = int(parts[2].strip())
                metrics["jellyfin_gpu_temperature_celsius"] = int(parts[3].strip())
                metrics["jellyfin_gpu_power_draw_watts"] = float(parts[4].strip())

            # Query number of GPU processes
            proc_out = subprocess.check_output([
                "docker", "exec", CONTAINER_NAME, "nvidia-smi",
                "--query-compute-apps=pid", "--format=csv,noheader"
            ], text=True, timeout=5)
            metrics["jellyfin_gpu_process_count"] = len([line for line in proc_out.strip().splitlines() if line.strip()])

        except Exception:
            # Leave all defaults for gauges (i.e., 0s)
            self.error_total += 1

        for metric, value in metrics.items():
            g = GaugeMetricFamily(metric, 'Generated by jellyfin_gpu_exporter', labels=["container"])
            g.add_metric(labels, value)
            yield g

        c = CounterMetricFamily(
           'jellyfin_gpu_exporter_errors_total',
           'Total number of exporter errors (command failures, parsing errors, etc)'
        )
        c.add_metric([], self.error_total)
        yield c


if __name__ == "__main__":
    REGISTRY.register(JellyfinGPUCollector())
    start_http_server(PORT)
    print(f"Serving on port {PORT}, monitoring container '{CONTAINER_NAME}'")
    while True:
        time.sleep(3600)

